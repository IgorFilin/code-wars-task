// Однажды, по пути через старый дикий гористый запад,...
// …человеку дали указания пройти из одной точки в другую. Направления были «СЕВЕР», «ЮГ», «ЗАПАД», «ВОСТОК». Очевидно, что «СЕВЕР» и «ЮГ» противоположны, «ЗАПАД» и «ВОСТОК» тоже.

// Идти в одном направлении и сразу же возвращаться в противоположном — бесполезное усилие. Поскольку это Дикий Запад, с ужасной погодой и небольшим количеством воды, важно сэкономить немного энергии, иначе вы можете умереть от жажды!

// Как я ловко пересек гористую пустыню.
// Указания, данные мужчине, например, следующие (в зависимости от языка):

// ["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST"].
// or
// { "NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST" };
// or
// [North, South, South, East, West, North, West]
// Сразу видно, что идти «НА СЕВЕР» и сразу «ЮГ» не разумно,
// лучше оставаться на том же месте! Итак, задача — дать человеку упрощенный вариант плана.
// Лучший план в этом случае:

// ["WEST"]
// or
// { "WEST" }
// or
// [West]
// Другие примеры:
// В ["NORTH", "SOUTH", "EAST", "WEST"]направлении "NORTH" + "SOUTH" идет на север
// и сразу же возвращается обратно .

// Путь становится ["EAST", "WEST"], now "EAST"и "WEST"уничтожают друг друга,
// поэтому конечный результат равен [](ноль в Clojure).

// В ["СЕВЕР", "ВОСТОК", "ЗАПАД", "ЮГ", "ЗАПАД", "ЗАПАД"], "СЕВЕР" и "ЮГ"
//  не являются прямо противоположными, но становятся прямо противоположными после сокращения
//  слова "ВОСТОК" и "WEST", поэтому весь путь можно свести к ["WEST", "WEST"].

// Задача
// Напишите функцию dirReduc, которая будет принимать массив строк и возвращать
//  массив строк с удаленными ненужными направлениями (W<->E или S<->N рядом ).

// Версия Haskell принимает список направлений с помощью data Direction = North | East | West | South.
// Версия Clojure возвращает ноль, когда путь сводится к нулю.
// Версия Rust использует часть enum Direction {North, East, West, South}.
// Дополнительные примеры см. в разделе «Примеры тестов»:
// Примечания
// Не все пути можно сделать проще.
// Путь [«СЕВЕР», «ЗАПАД», «ЮГ», «ВОСТОК»] не сокращается. «СЕВЕР» и «ЗАПАД»,
//  «ЗАПАД» и «ЮГ», «ЮГ» и «ВОСТОК» не являются прямо противоположными друг другу и не могут
//   стать таковыми. Следовательно, путь результата сам по себе следующий:
//    ["СЕВЕР", "ЗАПАД", "ЮГ", "ВОСТОК"].
// если вы хотите перевести, пожалуйста, спросите, прежде чем переводить.

function dirReduc(arr) {
  // ...

  const strategyDirection = {
    NORTH: "SOUTH",
    SOUTH: "NORTH",
    EAST: "WEST",
    WEST: "EAST",
  };

  let mutation = false;

  for (let i = 0; i < arr.length; i++) {
    if (!arr[i]) continue;
    if (strategyDirection[arr[i]] === arr[i + 1]) {
      if (!mutation) mutation = true;
      delete arr[i];
      delete arr[i + 1];
      arr = arr.filter((el) => el);
    }
  }

  if (!mutation) return arr;

  return dirReduc(arr);
}

console.log(dirReduc(["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST"]));
