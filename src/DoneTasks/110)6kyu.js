// Хорошо встретился со старшим братом Фибоначчи, также известным как Трибоначчи.

// Как уже понятно из названия, он работает в основном как Фибоначчи, но суммируя последние 3 (вместо 2) чисел последовательности для генерации следующего.
//  И, что еще хуже, я, к сожалению, не смогу услышать, как люди, не являющиеся носителями итальянского языка, пытаются его произнести :(

// Так,
// если мы хотим начать нашу последовательность Трибоначчи с [1, 1, 1] в качестве начального ввода (подпись AKA), у нас будет такая последовательность:

// [1, 1, 1, 3, 5, 9, 17, 31, ...]
// Но что, если мы начнем с [0, 0, 1] в качестве подписи? Поскольку начало с [0, 1] вместо [1, 1] по существу сдвигает обычную последовательность Фибоначчи на одно место,
// у вас может возникнуть соблазн подумать, что мы получим ту же самую последовательность, сдвинутую на 2 места, но это не так, и мы получим:

// [0, 0, 1, 1, 2, 4, 7, 13, 24, ...]
// Что ж, вы, возможно, уже догадались, но чтобы внести ясность: вам нужно создать функцию Фибоначчи, которая, учитывая массив/список сигнатур, возвращает первые n элементов -
// подпись включена в полученную таким образом последовательность.

// Подпись всегда будет содержать 3 цифры; n всегда будет неотрицательным числом; если n == 0, то верните пустой массив (кроме C, возвращающего NULL) и будьте готовы ко всему, что явно не указано;)
// Если вам понравилась эта ката, ее более продвинутую и обобщенную версию можно найти в ката Шбоначчи.

// [Личная благодарность профессору Джиму Фаулеру на Coursera за его замечательные занятия, которые я действительно рекомендую любому энтузиасту математики,
//    а также за то, что он показал мне это математическое любопытство с его обычной заразительной страстью :)]

// [1,1,1], 10], [1,1,1,3,5,9,17,31,57,105]

function tribonacci(signature, n) {
  // your code here
  const tribonacciArray = signature.slice();
  if (n === 0) return [];
  if (n === 1) return [1];

  for (let i = 3; i < n; i++) {
    const resultIterationNumber = tribonacciArray[i - 3] + tribonacciArray[i - 2] + tribonacciArray[i - 1];
    tribonacciArray.push(resultIterationNumber);
  }

  return tribonacciArray;
}

console.log(tribonacci([1, 1, 1], 10));
